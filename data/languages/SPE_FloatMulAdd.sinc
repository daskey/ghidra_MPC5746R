
# Additional SPE Instructions for Devices that Support VLE
# Freescale engineering bulletin EB689
# https://www.nxp.com/docs/en/engineering-bulletin/EB689.pdf

# additional SPE instructions that are implemented on devices with an e200z3 or e200z6 core that supports VLE
# - Vector Floating-Point Single-Precision Multiply-Add
# - Vector Floating-Point Single-Precision Multiply-Substract
# - Vector Floating-Point Single-Precision Negative Multiply-Add
# - Vector Floating-Point Single-Precision Negative Multiply-Substract
# - Floating-Point Single-Precision Multiply-Add
# - Floating-Point Single-Precision Multiply-Substract
# - Floating-Point Single-Precision Negative Multiply-Add
# - Floating-Point Single-Precision Negative Multiply-Substract


# evfsmadd - Vector Floating-Point Single-Precision Multiply-Add
:evfsmadd D,A,B is OP=4 & D & A & B & XOP_0_10=0x282
{
    local tmpAL:4 = A & 0xffffffff;
    local tmpAH:4 = A >> 32;
    local tmpBL:4 = B & 0xffffffff; 
    local tmpBH:4 = B >> 32;
    local tmpDL:4 = D & 0xffffffff;
    local tmpDH:4 = D >> 32;

    tmpDL = (tmpAL f* tmpBL) f+ tmpDL;
    tmpDH = (tmpAH f* tmpBH) f+ tmpDH;
    D = (tmpDH << 32) | tmpDL;
}

# evfsmsub - Vector Floating-Point Single-Precision Multiply-Subtract  
:evfsmsub D,A,B is OP=4 & D & A & B & XOP_0_10=0x283
{
    local tmpAL:4 = A & 0xffffffff;
    local tmpAH:4 = A >> 32;
    local tmpBL:4 = B & 0xffffffff;
    local tmpBH:4 = B >> 32;
    local tmpDL:4 = D & 0xffffffff;
    local tmpDH:4 = D >> 32;

    tmpDL = (tmpAL f* tmpBL) f- tmpDL;
    tmpDH = (tmpAH f* tmpBH) f- tmpDH;
    D = (tmpDH << 32) | tmpDL;
}

# evfsnmadd - Vector Floating-Point Single-Precision Negative Multiply-Add
:evfsnmadd D,A,B is OP=4 & D & A & B & XOP_0_10=0x28A 
{
    local tmpAL:4 = A & 0xffffffff;
    local tmpAH:4 = A >> 32;
    local tmpBL:4 = B & 0xffffffff;
    local tmpBH:4 = B >> 32;
    local tmpDL:4 = D & 0xffffffff;
    local tmpDH:4 = D >> 32;

    tmpDL = f- ((tmpAL f* tmpBL) f+ tmpDL);
    tmpDH = f- ((tmpAH f* tmpBH) f+ tmpDH);
    D = (tmpDH << 32) | tmpDL;
}

# evfsnmsub - Vector Floating-Point Single-Precision Negative Multiply-Subtract
:evfsnmsub D,A,B is OP=4 & D & A & B & XOP_0_10=0x28B
{
    local tmpAL:4 = A & 0xffffffff;
    local tmpAH:4 = A >> 32;
    local tmpBL:4 = B & 0xffffffff;
    local tmpBH:4 = B >> 32;
    local tmpDL:4 = D & 0xffffffff;
    local tmpDH:4 = D >> 32;

    tmpDL = f- ((tmpAL f* tmpBL) f- tmpDL);
    tmpDH = f- ((tmpAH f* tmpBH) f- tmpDH);
    D = (tmpDH << 32) | tmpDL;
}

# efsmadd - Floating-Point Single-Precision Multiply-Add
:efsmadd D,A,B is OP=4 & D & A & B & XOP_0_10=0x2C2
{
    local tmpA:4 = A & 0xffffffff;
    local tmpB:4 = B & 0xffffffff;
    local tmpD:4 = D & 0xffffffff;
    
    tmpD = (tmpA f* tmpB) f+ tmpD;
    D = tmpD;
}

# efsmsub - Floating-Point Single-Precision Multiply-Subtract
:efsmsub D,A,B is OP=4 & D & A & B & XOP_0_10=0x2C3
{
    local tmpA:4 = A & 0xffffffff;
    local tmpB:4 = B & 0xffffffff;
    local tmpD:4 = D & 0xffffffff;
    
    tmpD = (tmpA f* tmpB) f- tmpD;
    D = tmpD;
}

# efsnmadd - Floating-Point Single-Precision Negative Multiply-Add  
:efsnmadd D,A,B is OP=4 & D & A & B & XOP_0_10=0x2CA
{
    local tmpA:4 = A & 0xffffffff;
    local tmpB:4 = B & 0xffffffff;
    local tmpD:4 = D & 0xffffffff;

    tmpD = f- ((tmpA f* tmpB) f+ tmpD);
    D = tmpD;
}

# efsnmsub - Floating-Point Single-Precision Negative Multiply-Subtract
:efsnmsub D,A,B is OP=4 & D & A & B & XOP_0_10=0x2CB
{
    local tmpA:4 = A & 0xffffffff;
    local tmpB:4 = B & 0xffffffff;
    local tmpD:4 = D & 0xffffffff;

    tmpD = f- ((tmpA f* tmpB) f- tmpD);
    D = tmpD;
}