# Based on "EREF: A Reference for Freescale Book E and e500 Core" document version 01/2004 Rev 2.0
# Instructions that are specific to the (PowerPC) e500 core are implemented as auxiliary processing units (APUs)
# Embedded Vector and Scalar Single-Precision Floating-Point APUs (SPFP APU)
# There are three versions of e500 core, namely e500v1, the e500v2, and the e500mc.
# A 64-bit evolution of the e500mc core is called e5500 core.
# All PowerQUICC 85xx devices are based on e500v1 or e500v2 cores.

# Helper macro for floating-point max operation
macro fmax(result, a, b) {
    result = a;
    if (b f<= a) goto <done>;
    result = b;
    <done>
}

# Helper macro for floating-point min operation  
macro fmin(result, a, b) {
    result = a;
    if (b f>= a) goto <done>;
    result = b;
    <done>
}
# =================================================================
# Page 408
# efsabs rT,rA         010 1100 0100
#define pcodeop FloatingPointAbsoluteValue;
:efsabs D,A is OP=4 & D & A & XOP_0_10=0x2C4 & BITS_11_15=0
{
   D = abs( A );
}
# efsadd rT,rA,rB      010 1100 0000
#define pcodeop FloatingPointAdd;
:efsadd D,A,B is OP=4 & D & A & B & XOP_0_10=0x2C0
{
   D = A f+ B;
   setFPAddFlags( A, B, D );
}
# =================================================================
# Page 410
# efscfsf rT,rB        010 1101 0011
#define pcodeop  ConvertFloatingPointFromSignedFraction;
:efscfsf D,B is OP=4 & D & B & XOP_0_10=0x2D3 & BITS_16_20=0
{
   # load fractional divisor as a float
   tmpA:4 = 0x80000000;
   tmpA = int2float( tmpA );
   setFPRF( tmpA );
   # check if negative
   if ( ( B & 0x80000000 ) != 0 ) goto <negative>;
   # float the fractional portion of register B
   tmpB:4 = int2float( B );
   setFPRF( tmpB );
   tmpB = tmpB f/ tmpA;
   setFPDivFlags( tmpB, tmpA, tmpB );
   goto <done>;
   <negative>
   # float the fractional portion of register B, 2's complement negate
   tmpB = int2float( -( B ) );
   setFPRF( tmpB );
   tmpB = tmpB f/ tmpA;
   setFPDivFlags( tmpB, tmpA, tmpB );
   # negate the float
   tmpB = f-( tmpB );
   setFPRF( tmpB );
 
   <done>
   setSummaryFPSCR();
   D = tmpB;
}
# efscfsi rT,rB        010 1101 0001
#define pcodeop ConvertFloatingPointFromSignedInteger;
:efscfsi D,B is OP=4 & D & B & XOP_0_10=0x2D1 & BITS_16_20=0
{
   # check if negative
   if ( ( B & 0x80000000 ) != 0 ) goto <negative>;
   # float the integer portion of register B
   tmpB:4 = int2float( B );
   setFPRF( tmpB );
   goto <done>;
   <negative>
   # float the integer portion of register B, 2's complement negate
   tmpB = int2float( -( B ) );
   setFPRF( tmpB );
   # negate the float
   tmpB = f-( tmpB );
   setFPRF( tmpB );
 
   <done>
   setSummaryFPSCR();
   D = tmpB;
}
# efscfuf rT,rB        010 1101 0010
define pcodeop ConvertFloatingPointFromUnsignedFraction;
:efscfuf D,B is OP=4 & D & B & XOP_0_10=0x2D2 & BITS_16_20=0
{
   # load fractional divisor as a float
   tmpA:4 = 0x80000000;
   tmpA = tmpA * 2;  # Create 0x100000000 in 32-bit space
   tmpA = int2float( tmpA );
   setFPRF( tmpA );
   # float the fractional portion of register B
   tmpB:4 = int2float( B );
   setFPRF( tmpB );
   tmpB = tmpB f/ tmpA;
   setFPDivFlags( tmpB, tmpA, tmpB );
   tmpC:4 = tmpB;
   setFPRF( tmpC );
   setSummaryFPSCR();
   D = tmpC;
}
#  rT,rB        010 1101 0000
#define pcodeop ConvertFloatingPointFromUnsignedInteger;
:efscfui D,B is OP=4 & D & B & XOP_0_10=0x2D0 & BITS_16_20=0
{
   tmp:4 = int2float( B );
   setFPRF( tmp );
   D = tmp;
   setSummaryFPSCR();
}
# efscmpeq CRFD,rA,rB        010 1100 1110
:efscmpeq CRFD,A,B is OP=4 & CRFD & A & B & XOP_0_10=0x2CE & BITS_21_22=0
{
  CRFD[2,1] = A f== B;
}
# =================================================================
# Page 415
# efscmpgt CRFD,rA,rB        010 1100 1100
:efscmpgt CRFD,A,B is OP=4 & CRFD & A & B & XOP_0_10=0x2CC & BITS_21_22=0
{
  CRFD[2,1] = A f> B;
}
# efscmplt CRFD,rA,rB        010 1100 1101
:efscmplt CRFD,A,B is OP=4 & CRFD & A & B & XOP_0_10=0x2CD & BITS_21_22=0
{
  CRFD[2,1] = A f< B;
}
# efsctsf rT,rB        010 1101 0111
#define pcodeop ConvertFloatingPointToSignedFraction;
:efsctsf D,B is OP=4 & D & B & XOP_0_10=0x2D7 & BITS_16_20=0
{
   # multiply by 0x8000 0000 to scale the fraction up to integer range
   # load fractional multiplier as a float
   tmpM:4 = 0x80000000;
   tmpM = int2float( tmpM );
   setFPRF( tmpM );
   # load saturation limit as a float
   tmpL:4 = 0x7FFFFFFF;
   tmpL = int2float( tmpL );
   setFPRF( tmpL );
   # scale the saturation limit to a fractional float
   tmpL = tmpL f/ tmpM;
   setFPDivFlags( tmpL, tmpM, tmpL );
   # get B float
   tmpB:4 = B;
   setFPRF( tmpB );
   # check if less than or equal to positive saturation limit
   if ( tmpB f<= tmpL ) goto <check_negative>;
      # set to positive saturation
      tmpB = tmpL;
   goto <done>;
   <check_negative>
   # check if greater than or equal to negative saturation limit
   tmpL = f-( tmpL );
   if ( tmpB f>= tmpL ) goto <done>;
      # set to negative saturation
      tmpB = tmpL;
   <done>
   # scale the fractional portion up to integer side of mantissa
   tmpB = tmpB f* tmpM;
   setFPMulFlags( tmpB, tmpM, tmpB );
   # truncate back to signed fraction format
   tmpC:4 = trunc( tmpB );
   setFPRF( tmpB );
   setSummaryFPSCR();
   D = tmpC;
}
# efsctsi rT,rB        010 1101 0101
#define pcodeop ConvertFloatingPointToSignedInteger;
:efsctsi D,B is OP=4 & D & B & XOP_0_10=0x2D5 & BITS_16_20=0
{
   # create zero float constant
   tmpA:4 = 0;
   tmpA = int2float( tmpA );
   # check if negative
   if ( B f< tmpA ) goto <negative>;
   tmpB:4 = trunc(round( B ));
   setFPRF( tmpB );
   # limit to positive saturation
   if ( tmpB s<= 0x7FFFFFFF ) goto <positive_clipped>;
      tmpB = 0x7FFFFFFF;
   <positive_clipped>
   goto <done>;
   <negative>
   # negate the float
   tmpB = trunc(round( f-( B ) ));
   setFPRF( tmpB );
   # limit to negative saturation  
   if ( tmpB s<= 0x80000000 ) goto <negative_clipped>;
      tmpB = 0x80000000;
   <negative_clipped>
   # negate the signed int
   tmpB = -( tmpB );
   <done>
   setSummaryFPSCR();
   D = tmpB;
}
# efsctsiz rT,rB        010 1101 1010
#define pcodeop ConvertFloatingPointToSignedIntegerWithRoundTowardZero;
:efsctsiz D,B is OP=4 & D & B & XOP_0_10=0x2DA & BITS_16_20=0
{
   # create zero float constant
   tmpA:4 = 0;
   tmpA = int2float( tmpA );
   # check if negative
   if ( B f< tmpA ) goto <negative>;
   tmpB:4 = trunc( B );
   setFPRF( tmpB );
   # limit to saturation
   if ( tmpB s<= 0x7FFFFFFF ) goto <positive_clipped>;
      tmpB = 0x7FFFFFFF;
   <positive_clipped>
   goto <done>;
   <negative>
   # negate the float
   tmpB = trunc( f-( B ) );
   setFPRF( tmpB );
   # limit to saturation
   if ( tmpB s<= 0x80000000 ) goto <negative_clipped>;
      tmpB = 0x80000000;
   <negative_clipped>
   # negate the signed int
   tmpB = -( tmpB );
   <done>
   setSummaryFPSCR();
   D = tmpB;
}
# =================================================================
# Page 420
# efsctuf rT,rB        010 1101 0110
#define pcodeop ConvertFloatingPointToUnsignedFraction;
:efsctuf D,B is OP=4 & D & B & XOP_0_10=0x2D6 & BITS_16_20=0
{
   # multiply by 0x1 0000 0000 to scale the fraction up to integer range
   # load fractional multiplier as a float
   tmpM:4 = 0x80000000;
   tmpM = tmpM * 2;  # Create 0x100000000 in 32-bit space
   tmpM = int2float( tmpM );
   setFPRF( tmpM );
   # load saturation limit as a float
   tmpL:4 = 0xFFFFFFFF;
   tmpL = int2float( tmpL );
   setFPRF( tmpL );
   # scale the saturation limit to a fractional float
   tmpL = tmpL f/ tmpM;
   setFPDivFlags( tmpL, tmpM, tmpL );
   # get B float
   tmpB:4 = B;
   setFPRF( tmpB );
   # check if less than or equal to positive saturation limit
   if ( tmpB f<= tmpL ) goto <done>;
      # set to saturation
      tmpB = tmpL;
   <done>
   # scale the fractional portion up to integer side of mantissa
   tmpB = tmpB f* tmpM;
   setFPMulFlags( tmpB, tmpM, tmpB );
   # truncate back to integer
   tmpC:4 = trunc( tmpB );
   setFPRF( tmpC );
   setSummaryFPSCR();
   D = tmpC;
}
# efsctui rT,rB        010 1101 0100
#define pcodeop ConvertFloatingPointToUnsignedInteger;
:efsctui D,B is OP=4 & D & B & XOP_0_10=0x2D4 & BITS_16_20=0
{
   tmpB:4 = trunc(round( B ));
   setFPRF( tmpB );
   # limit to saturation
   if ( tmpB s<= 0x7FFFFFFF ) goto <done>;
      tmpB = 0x7FFFFFFF;
   <done>
   setSummaryFPSCR();
   D = tmpB;
}
# efsctuiz rT,rB        010 1101 1000
#define pcodeop ConvertFloatingPointToUnsignedIntegerWithRoundTowardZero;
:efsctuiz D,B is OP=4 & D & B & XOP_0_10=0x2D8 & BITS_16_20=0
{
   tmpB:4 = trunc( B );
   setFPRF( tmpB );
   # limit to saturation
   if ( tmpB s<= 0x7FFFFFFF ) goto <done>;
      tmpB = 0x7FFFFFFF;
   <done>
   setSummaryFPSCR();
   D = tmpB;
}
# efsdiv rT,rA,rB      010 1100 1001
#define pcodeop FloatingPointDivide;
:efsdiv D,A,B is OP=4 & D & A & B & XOP_0_10=0x2C9
{
   D = A f/ B;
   setFPDivFlags( A, B, D );
}
# efsmul rT,rA,rB      010 1100 1000
#define pcodeop FloatingPointMultiply;
:efsmul D,A,B is OP=4 & D & A & B & XOP_0_10=0x2C8
{
   D = A f* B;
   setFPMulFlags( A, B, D );
}
# =================================================================
# Page 425
# efsnabs rT,rA         010 1100 0101
#define pcodeop FloatingPointNegativeAbsoluteValue;
:efsnabs D,A is OP=4 & D & A & XOP_0_10=0x2C5 & BITS_11_15=0
{
   D = f- ( abs( A ) );
   setFPRF( D );
   setSummaryFPSCR();
}
# efsneg rT,rA         010 1100 0110
#define pcodeop FloatingPointNegate;
:efsneg D,A is OP=4 & D & A & XOP_0_10=0x2C6 & BITS_11_15=0
{
   D = f-( A );
   setFPRF( D );
   setSummaryFPSCR();
}
# efssub rT,rA,rB      010 1100 0001
#define pcodeop FloatingPointSubtract;
:efssub D,A,B is OP=4 & D & A & B & XOP_0_10=0x2C1
{
   D = A f- B;
   setFPSubFlags( A, B, D );
   setSummaryFPSCR();
}
# efststeq CRFD,rA,rB        010 1101 1110
#define pcodeop FloatingPointTestEqual;
:efststeq CRFD,A,B is OP=4 & CRFD & A & B & XOP_0_10=0x2DE & BITS_21_22=0
{
  CRFD[2,1] = A f== B;
}
# efststgt CRFD,rA,rB        010 1101 1100
#define pcodeop FloatingPointTestGreaterThan;
:efststgt CRFD,A,B is OP=4 & CRFD & A & B & XOP_0_10=0x2DC & BITS_21_22=0
{
  CRFD[2,1] = A f> B;
}
# =================================================================
# Page 430
# efststlt CRFD,rA,rB        010 1101 1101
#define pcodeop FloatingPointTestLessThan;
:efststlt CRFD,A,B is OP=4 & CRFD & A & B & XOP_0_10=0x2DD & BITS_21_22=0
{
  CRFD[2,1] = A f< B;
}
# efsmin rT,rA,rB      010 1100 1010
:efsmin D,A,B is OP=4 & D & A & B & XOP_0_10=0x2B1
{
    fmin(D, A, B);
    setSummaryFPSCR();
}
# efsmax rT,rA,rB      010 1100 1011
:efsmax D,A,B is OP=4 & D & A & B & XOP_0_10=0x2b0
{
    fmax(D, A, B);
    setSummaryFPSCR();
}

# VLE Special Load/Store Instructions
:e_lmvgprw   is OP=4 & XOP_0_10=0x207 {
    # Load Multiple GPR Words
}

:e_lmvmcsrrw is OP=4 & XOP_0_10=0x208 {
    # Load Multiple MCSR Words
}

:e_lmvsprw   is OP=4 & XOP_0_10=0x209 {
    # Load Multiple SPR Words
}

:e_stmvmcsrrw is OP=4 & XOP_0_10=0x20A {
    # Store Multiple MCSR Words
}

:se_nop      is OP=1 & XOP_0_5=0x00 {
    # SE no operation
}



:e_nop       is OP=4 & XOP_0_10=0x000 {
    # VLE no operation
}

# binutils-descr: "lbdx",    X(31,515),    X_MASK,      E500MC,    PPCNONE,    {RT, RA, RB}
define pcodeop lbdxOp;
# ISA-info: lbdx - Form "X" Page 708 Category "DS"
# binutils: e500mc.d:   68:    7c 01 14 06     lbdx    r0,r1,r2
:lbdx RT,A,B is OP=31 & XOP_1_10=515 & RT & A & B & BIT_0=0  { RT = lbdxOp(RT,A,B); }

:mpusync is OP=31 & XOP_0_10=1132 & Rc=0 {
}