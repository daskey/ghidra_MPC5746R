# VLE Arithmetic Instructions
# e_addbus - Add Byte Unsigned
:e_addbus D, A, B is OP=31 & D & A & B & XOP_0_10=0x7D4
{
    local a:1 = A:1;
    local b:1 = B:1;
    local temp:2 = zext(a) + zext(b); # Do addition in wider type to handle overflow
    local result:1 = temp:1; # Truncate back to byte
    D = zext(result);
}

# e_addhus - Add Halfword Unsigned Saturate
:e_addhus D, A, B is OP=31 & D & A & B & XOP_0_10=0x754
{
    local a:2 = A:2;  # Get 16-bit values
    local b:2 = B:2;
    local temp:4 = zext(a) + zext(b);  # Do addition in wider type
    local result:2;
    
    if (temp > 0xffff) goto <saturate>;
    result = temp:2;
    goto <done>;
    <saturate>
    result = 0xffff;
    <done>
    D = zext(result);
}

# e_addwus - Add Word Unsigned
:e_addwus D, A, B is OP=31 & D & A & B & XOP_0_10=0x6D4
{
    local a:4 = A:4;
    local b:4 = B:4;
    local result:4 = a + b;
    D = zext(result);
}

# e_subfbus - Subtract Byte Unsigned
:e_subfbus D, A, B is OP=31 & D & A & B & XOP_0_10=0x7d0
{
    local a:1 = A:1;
    local b:1 = B:1;
    local temp:2 = zext(b) - zext(a); # Do subtraction in wider type
    local result:1 = temp:1;
    D = zext(result);
}

# e_subfhus - Subtract Halfword Unsigned Saturate
:e_subfhus D, A, B is OP=31 & D & A & B & XOP_0_10=0x750
{
    local a:2 = A:2;
    local b:2 = B:2;
    local temp:4 = zext(b) - zext(a); # Do subtraction in wider type
    local result:2;
    
    if (b < a) goto <saturate>;
    result = temp:2;
    goto <done>;
    <saturate>
    result = 0;
    <done>
    D = zext(result);
}

:e_nop       is OP=4 & XOP_0_10=0x000 {
    # VLE no operation
}

:mpusync is OP=31 & XOP_0_10=1132 & Rc=0 {
}