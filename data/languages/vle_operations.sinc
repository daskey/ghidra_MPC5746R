# VLE Arithmetic Instructions
# e_addbus - Add Byte Unsigned
:e_addbus D, A, B is OP=31 & D & A & B & XOP_0_10=0x7D4
{
    local result:1 = (A:1 + B:1) & 0xFF;
    D = zext(result);
}

# e_addhus - Add Halfword Unsigned Saturate
:e_addhus D, A, B is OP=31 & D & A & B & XOP_0_10=0x754 & Rc=0 {
    local a;
    local b;
    local sum;

    a = A & 0xFFFF;          # Extract lower 16 bits of A
    b = B & 0xFFFF;          # Extract lower 16 bits of B
    sum = a + b;             # Sum of a and b

    if (sum > 0xFFFF) goto <saturate>;
    D = sum;
    goto <done>;

<saturate>
    D = 0xFFFF;

<done>
}

# e_addwus - Add Word Unsigned
:e_addwus D, A, B is OP=31 & D & A & B & XOP_0_10=0x6D4
{
    local result:$(REGISTER_SIZE) = A + B;
    D = result;
}

# e_subfbus - Subtract Byte Unsigned
:e_subfbus D, A, B is OP=31 & D & A & B & XOP_0_10=0x7d0
{
    local a:1 = A:1;
    local b:1 = B:1;
    local result:1 = b - a;
    D = zext(result);
}

# e_subfhus - Subtract Halfword Unsigned Saturate
:e_subfhus D, A, B is OP=31 & D & A & B & XOP_0_10=0x750
{
    local a:2 = A:2;
    local b:2 = B:2;
    local result:2 = b - a;
    if (b < a) goto <saturate>;
    goto <done>;
    <saturate>
    result = 0;
    <done>
    D = zext(result);
}

:e_nop       is OP=4 & XOP_0_10=0x000 {
    # VLE no operation
}

# binutils-descr: "lbdx",	X(31,515),	X_MASK,      E500MC,	PPCNONE,	{RT, RA, RB}
define pcodeop lbdxOp;
# ISA-info: lbdx - Form "X" Page 708 Category "DS"
# binutils: e500mc.d:   68:	7c 01 14 06 	lbdx    r0,r1,r2
:lbdx RT,A,B is OP=31 & XOP_1_10=515 & RT & A & B & BIT_0=0  { RT = lbdxOp(RT,A,B); }

:mpusync is OP=31 & XOP_0_10=1132 & Rc=0 {
}